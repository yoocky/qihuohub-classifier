



说起“算法”，很多人的第一反应是计算机程序。没错，算法是计算机不可或缺的一部分。计算机专业的本科生大都上过一门课《数据结构与算法》（Data Structure and Algorithms），或者有时候数据结构和算法是分做两门课的，虽然这两件事几乎不可分割，比如针对大量数据的搜索和排序之类的算法。我自己虽非纯正的计算机专业出身，但也一度对研究算法很痴迷，直到很冲动地买了一套诺斯的名著《计算机程序的艺术》（The Art of Computer Programming），待拿到书一看，顿时有种以大学英语四级水平去读原版《尤利西斯》的感觉。






在计算机内部，算法确实无处不在，比如算法决定了CPU如何在多任务间分配处理时间和内存等其他资源，而操作系统和应用程序中也包含了极多的算法。多年前我曾经写过一个天燃气期货不同期限合约间的套利和对冲的自动交易算法，其复杂程度超过我之前写过的任何东西，对于我的伤害之深以至于我现在还不时梦见当时交易主管狞笑的脸。






但另一方面，算法其实在我们的生活和周遭世界中也无所不在。算法，简单了说，就是一系列步骤的总和，告诉我们如何完成一件任务。这样一来，我们烹饪的菜谱就是一个算法；我们每天工作的日程安排也可以看作是一个算法；每当计划做任何一件事时，我们的思维中就形成了一个算法。甚至，我们自身就是算法的结果：我们的身体归根到底是由基因决定的，而基因是产生一条多肽链或功能RNA所需的全部核苷酸序列。不同种的生物有着相异的基因序列或者编码，大自然以自己的算法决定了我们的种族、孕育、生长和凋亡。











由于算法无处不在，有意识地借鉴算法思维对我们生活中的决策很有帮助。对日常生活有直接指导意义的算法很多，比如等待、排序、储存、安排、随机和博弈等。这其中，有一类算法我们平时遇到的比较多也非常有趣，叫做“最佳终止”（Optimum Stopping）算法。






问题的提出是这样的。想象一个场景，你在玩一种类似天朝电视台的“开门大吉”的节目，每过一关（听15秒钟的音乐后准确报出歌名）你会得到一定的奖励，在每一关你都面临两个选择：是停下来到此为止还是继续闯关。如果停下来，你会保住到目前的胜利果实，但失去了赚更多钱的机会，也许下一首曲子很简单呢？但如果选择继续，你有可能答错并失去一切。所以，你如何做理性的判断？这和好莱坞电影中的老套场景很像。一位江洋大盗已经金盆洗手退隐山林了，这时总有一位朋友适时地带来一个消息：发哥，有笔大生意绝不容错过，再干一票吧！虽然电影中的发哥总是在纠结一番之后重新披挂上阵（要不电影怎么编下去？），但现实中如果你是发哥你会做出怎样的明智选择？






考虑更接地气的场景。你，一位初创公司的老板，准备招聘一位秘书，要求是手脚麻利、能干且电脑操作熟练。但你之前没有招聘秘书的经验，所以开始的时候你会多看几位候选人。那么问题是，在什么时候你该终止搜寻并签发offer? 或者，你打算在一个陌生的城市住下来，首要的任务是找住的地方。你需要搜寻多久才会确定你现在看的房子就是你想要的？或者，你初入职场，你打算面试多少份职位才能确认你能找到的理想职位是什么？再或者，你开车去一个拥挤而热闹的地方，比如球场或者音乐会，你知道要找到一个停车的位子很难，那在距离目的地多远的地方你就该把车停下来？离得太近几乎肯定找不到车位，但离得太远又需下车后步行很长时间。这类的问题，在数学上笼统地被称作经典的“找秘书”问题。











先说说作为发哥的你是否该出山吧。你很清楚，每次作案的时候，你都面临两种后果：要么获利要么被警察抓住。如果你技艺高超不同于常人，每次行动你有90%的可能性逃脱，10%的可能性被抓捕归案，那么理智地说，你应该在作案90%/10% = 9 次之后就收手不干了。也就是说，如果你遵循“最佳终止”算法的指导，你在金盘洗手之后永远都不该再去干下一票。另一方面，如果你的水平有限，只有50%的概率逃脱（说明你不适合做这行），那么你只应该干一次试试你的手气，如果没有失手，那就立刻考虑往别的方向发展吧。 






下面来看看“找秘书”的问题。这里我们有两个并不算严格的假设。第一，如果你面试了某位候选人而决定不雇她的话，之后她就不在你的考虑范围之内了，即不能回溯。第二，如果你决定雇某位获选人，她会立刻接受这份工作，寻找也就立刻终止。每次面试一位候选人，你面临两个选择：雇她或者不雇。因为你的目的是从所有的候选人中挑出最佳的那位，所以如果你决定留下目前的这位，那么你可能错失更好的，因为你还没有机会见到她；但如果你不留下当前的这位，那么风险当然是她确实是最好的但你犯了一个错误。






这当然跟候选人数有关。我们先从最简单的开始。现在假设只有1位候选人，那么你没有选择只能雇她。如果有2位，合理的做法是先面试第一位，然后雇第二位，这种情形下你能找到最佳候选人的概率是50%。如果有3位候选人，情况略微复杂，但这时最好的策略是先面试第一位，然后考察后面的两位，并留下好于第一位候选人的那位。也就是说，考察第一位为你建立了一个挑选的标准，即在约1/3的位置上停止搜索，然后把工作给下一位高于标准的候选人。在这种算法下，你能找到最佳候选人的概率是50%，好过随机挑选的33%的概率。（具体来说，成功的情形是2-1-3、2-3-1和3-1-2，过度挑选的情形是1-2-3和1-3-2，而挑选不够的情形是3-2-1）。随着候选人数的增加，如果使用相同的算法，我们就会发现最佳的终止位置收敛到37%，并且已经在数学上被严格证明。











这就是所谓的“37%”法则。在应用的时候，这个数字大概是在35%~40%之间，在空间或者时间上都适用。例如，假设你目前18岁，正在寻找一生的伴侣，并打算在30岁之前结婚。那么根据这个法则，你可以在(30-18)*0.37+18=22.4岁之前尽管约会，在那之后如果遇见了心仪的人就立刻向她/他求婚吧，因为这样可以最大化实现你的目标（30岁之前结婚+找到最佳人生伴侣）的可能性。 
当然，上面的描述还是做了很多简化的，现实中往往更复杂：就算你找到了满意的候选人，她也可能拒绝这份工作；或者过了一段时间，你发现之前的某位候选人其实更令你满意，即有回溯机制；这里也没有考虑搜索的时间成本，也忽略了搜索者的心理因素（比如，搜索到了一定时间之后，你会感到疲惫，想尽快结束这个任务）。另外，如果有之前的经验做参考，或者有某些量化的指标（比如候选人是否读过名牌大学，某项考试的成绩是否优秀），更完备的信息都会在某种程度上改变上面的结论。有兴趣的话，可以参看相关的论文。
















算法在金融交易和投资上的应用早就是老生常谈了，所以有“算法交易”（Algorithmic Trading）这个名词，比如大名鼎鼎的文艺复兴基金常年靠自己特有的算法在市场上大赚特赚。其实就算不用写程序做算法交易，每位投资者的投资决策过程就是一项算法，不管是基于基本面的企业盈利，还是基于技术面的均线排列。 
不用说，我们目前处于人工智能大发展的前夜，而根据我的理解，未来很长一段时间内的人工智能就是算法+大数据，前不久谷歌旗下子公司DeepMind开发的AlphaGo Zero的惊人表现更彰显出算法的重要性。人类最早的算法据说是在巴格达发现的距今4000多年前的一块苏美尔人的泥板，上面刻着如何做大位数相除的步骤。在人类文明几千年的进步之后，《算法帝国》的作者斯坦纳写道：“算法涉足的领域已经远远超出了其创造者的预期。特别是进入信息时代以后，算法的应用涵盖金融、医疗、法律、体育、娱乐、外交、文化、国家安全等诸多方面，显现出源于人类而又超乎人类的强大威力。”











据说在AI时代的人都应该时常考虑一个问题：你什么时候被机器取代？在德州牌桌上，如果你想战胜对手，就要设法洞察对手的心理和思路；在AI时代，如果想要和机器对抗，了解机器的核心—算法—大概是很有必要的。不多说了，待我回去找出算法和数据结构的教科书再从头看一遍。



-------------------------------------
如果您有优质的、符合见闻调性的原创文章，欢迎以个人的名义投稿入驻华尔街见闻名家专栏。
投稿方式 ：请将个人简介以及代表作品发送至 zhuanlan@wallstreetcn.com ，并附上电话和微信以便做进一步沟通，在主题中标明: 申请入驻见闻专栏 + 投稿人名字
