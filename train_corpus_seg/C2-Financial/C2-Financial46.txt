了解 过 比特 币 和 区块 链 的 人 ， 多少 都 听说 过 拜占庭 将军 问题 ， 或 听说 过 比特 币 （ 或 区块 链 ） 的 一个 重要 成就 正是 解决 了 拜占庭 将军 问题 。 但 真正 明白 这个 问题 的 人 并不多 ， 甚至 知道 这个 问题 实质 的 人 都 很 罕见 。 本文 是 一篇 技术 科普 ， 将 重点 提供 了 拜占庭 将军 问题 本身 对 本质 及 经典 算法 的 解析 ， 并 探讨 与 之 相关 的 一些 问题 。 笔者 参考 了 不少 文献 ， 夹杂 了 大量 私货 ， 但 并 没有 提出 解决 该 问题 的 新 算法 ， 这 也 不是 本文 的 目的 。   Part1 ： 拜占庭 将军 问题 是 什么   拜占庭 将军 问题 是 一个 共识 问题 : 首先 由 LeslieLamport 与 另外 两人 在 1982 年 提出 ， 被 称为 TheByzantine 
 GeneralsProblem 或者 Byzantine 
 Failure 。 核心 描述 是 军中 可能 有 叛徒 ， 却 要 保证 进攻 一致 ， 由此 引申 到 计算 领域 ， 发展 成 了 一种 容错 理论 。 随着 比特 币 的 出现 和 兴起 ， 这个 著名 问题 又 重入 大众 视野 。   1.1 . 拜占庭 将军 问题 场景   关于 拜占庭 将军 问题 ， 一个 简易 的 非正式 描述 如下 ： 拜占庭 帝国 想要 进攻 一个 强大 的 敌人 ， 为此 派出 了 10 支 军队 去 包围 这个 敌人 。 这个 敌人 虽不比 拜占庭 帝国 ， 但 也 足以 抵御 5 支 常规 拜占庭 军队 的 同时 袭击 。 基于 一些 原因 ， 这 10 支 军队 不能 集合 在 一起 单点 突破 ， 必须 在 分开 的 包围 状态 下 同时 攻击 。 他们 任 一支 军队 单独 进攻 都 毫无 胜算 ， 除非 有 至少 6 支 军队 同时 袭击 才能 攻下 敌国 。 他们 分散 在 敌国 的 四周 ， 依靠 通信兵 相互 通信 来 协商 进攻 意向 及 进攻 时间 。 困扰 这些 将军 的 问题 是 ， 他们 不 确定 他们 中 是否 有 叛徒 ， 叛徒 可能 擅自 变更 进攻 意向 或者 进攻 时间 。 在 这种 状态 下 ， 拜占庭 将军 们 能否 找到 一种 分布式 的 协议 来 让 他们 能够 远程 协商 ， 从而 赢取 战斗 ？ 这 就是 著名 的 拜占庭 将军 问题 。 应该 明确 的 是 ， 拜占庭 将军 问题 中 并 不 去 考虑 通信兵 是否 会 被 截获 或 无法 传达 信息 等 问题 ， 即 消息传递 的 信道 绝无 问 。 Lamport 已经 证明 了 在 消息 可能 丢失 的 不 可靠 信道 上 试图 通过 消息传递 的 方式 达到 一致性 是 不 可能 的 。 所以 ， 在 研究 拜占庭 将军 问题 的 时候 ， 我们 已经 假定 了 信道 是 没有 问题 的 ， 并 在 这个 前提 下 ， 去 做 一致性 和 容错性 相关 研究 。 如果 需要 考虑 信道 是 有 问题 的 ， 这 涉及 到 了 另 一个 相关 问题 ： 两军 问题 。   1.2 . 与 拜占庭 将军 相关 问题 ： 两军 问题   正如 前 文 所说 ， 拜占庭 将军 问题 和 两军 问题 实质 是 不 一样 的 。 国内 大量 解释 拜占庭 将军 问题 的 文章 将 两者 混为一谈 ， 其实 是 混淆 了 两个 问题 的 实质 ， 由此 造成 了 许多 误解 。 这 两个 问题 看起来 的确 有点 相似 ， 但是 问题 的 前提 和 研究 方向 都 截然不同 。 （ 图 1 ： 两军 问题 图示 ） 如图 1 所示 ， 白军 驻扎 在 沟渠 里 ， 蓝军 则 分散 在 沟渠 两边 。 白军 比 任何 一支 蓝军 都 更为 强大 ， 但是 蓝军 若 能 同时 合力 进攻 则 能够 打败 白军 。 他们 不 能够 远程 的 沟通 ， 只能 派遣 通信兵 穿过 沟渠 去 通知 对方 蓝军 协商 进攻 时间 。 是否 存在 一个 能 使 蓝军 必胜 的 通信协议 ， 这 就是 两军 问题 。 看到 这里 您 可能 发现 两军 问题 和 拜占庭 将军 问题 有 一定 的 相似性 ， 但 我们 必须 注意 的 是 ， 通信兵 得 经过 敌人 的 沟渠 ， 在 这 过程 中 他 可能 被捕 ， 也就是说 ， 两军 问题 中 信道 是 不 可靠 的 ， 并且 其中 没有 叛徒 之 说 ， 这 就是 两军 问题 和 拜占庭 将军 问题 的 根本性 不同 。 由此可见 ， 大量 混淆 了 拜占庭 将军 问题 和 两军 问题 的 文章 并 没有 充分 理解 两者 。 两军 问题 的 根本 问题 在于 信道 的 不 可靠 ， 反过来说 ， 如果 传递 消息 的 信道 是 可靠 的 ， 两军 问题 可解 。 然而 ， 并 不 存在 这样 一种 信道 ， 所以 两军 问题 在 经典 情境 下 是 不可 解 的 ， 为什么 呢 ？ 倘若 1 号 蓝军 （ 简称 1 ） 向 2 号 蓝军 （ 简称 2 ） 派出 了 通信兵 ， 若 1 要 知道 2 是否 收到 了 自己 的 信息 ， 1 必须 要求 2 给 自己 传输 一个 回执 ， 说 “ 你 的 信息 我 已经 收到 了 ， 我 同意 你 提议 的 明天 早上 10 点 9 分 准时 进攻 ” 。 然而 ， 就算 2 已经 送出 了 这条 信息 ， 2 也 不能 确定 1 就 一定 会 在 这个 时间 进攻 ， 因为 2 发出 的 回执 1 并不一定 能够 收到 。 所以 ， 1 必须 再 给 2 发出 一个 回执 说 “ 我 收到 了 ” ， 但是 1 也 不会 知道 2 是否 收到 了 这样 一个 回执 ， 所以 1 还会 期待 一个 2 的 回执 。 虽然 看似 很 可笑 ， 但 在 这个 系统 中 永远 需要 存在 一个 回执 ， 这 对于 两方 来说 都 并不一定 能够 达成 十足 的 确信 。 更 要命 的 是 ， 我们 还 没有 考虑 ， 通信兵 的 信息 还有 可能 被 篡改 。 由此可见 ， 经典 情形 下 两军 问题 是 不可 解 的 ， 并 不 存在 一个 能 使 蓝军 一定 胜利 的 通信协议 。 不幸 的 是 ， 两军 问题 作为 现代 通信 系统 中 必须 解决 的 问题 ， 我们 尚 不能 将 之 完全 解决 ， 这 意味着 你 我 传输 信息 时 仍然 可能 出现 丢失 、 监听 或 篡改 的 情况 。 但 我们 能 不能 通过 一种 相对 可靠 的 方式 来 解决 大部分 情形 呢 ？ 这 需要 谈到 TCP 协议 。 事实上 ， 搜索 “ 两军 问题 与 三次 握手 ” ， 您 一定 可以 找到 大量 与 TCP 协议 相关 的 内容 。 若 您 是 通信 方面 的 专家 ， 权当 笔者 是 班门弄斧 ， 这里 仅用 最 浅显易懂 的 方式 科普 TCP 协议 的 原理 和 局限 ， 可能 存在 一些 毛刺 ， 请 多 包涵 。   
                                                                         
                                                                         
                                                 （ 图 2 ： TCP 协议 的 基本原理 ） TCP 协议 中 ， A 先向 B 发出 一个 随机数 x ， B 收到 x 了 以后 ， 发给 A 另 一个 随机数 y 以及 x + 1 作为 答复 ， 这样 A 就 知道 B 已经 收到 了 ， 因为 要 破解 随机数 x 可能性 并不大 ； 然后 A 再 发回 y + 1 给 B ， 这样 B 就 知道 A 已经 收到 了 。 这样 ， A 和 B 之间 就 建立 一个 可靠 的 连接 ， 彼此 相信 对方 已经 收到 并 确认 了 信息 。 而 事实上 ， A 并 不会 知道 B 是否 收到 了 y + 1 ； 并且 ， 由于 信道 的 不可靠性 ， x 或者 y 都 是 可能 被 截获 的 ， 这些 问题 说明 了 即使 是 三次 握手 ， 也 并 不 能够 彻底解决 两军 问题 ， 只是 在 现实 成本 可控 的 条件 下 ， 我们 把 TCP 协议 当作 了 两军 问题 的 现实 可解 方法 。   
                                                                         
                                                                         
                                     （ 图 3 ： 量子 隐形 传态 的 原理图 ） 那么 ， 是否 能够 找到 一个 理论 方法 来 真正 的 破解 两军 问题 呢 ？ 答案 是 有 的 ， 量子 通讯 协议 ， 笔者 并 没有 能力 弄清 这个 颇为 高深 的 问题 。 据 我 的 理解 ， 处于 量子 纠缠 态 的 两个 粒子 ， 无论 相隔 多远 都 能够 彼此 同步 ， 光是 直观 的 来看 ， 这个 效应 可以 用来 实现 保密 通讯 。 但是 由于 测 不准 原理 ， 一 测量 粒子 状态 就 会 改变 其 状态 ， 所以 通讯 时 还 必须 通过 不 可靠 信道 发送 另 一条 信息 。 尽管 这个 “ 另 一条 信息 ” 是 不 可靠 的 ， 但是 由于 已经 存在 了 一条 绝对 可靠 的 信道 （ 量子 纠缠 ） ， 保证 了 另 一条 信道 即使 不 可靠 也 能 保证 消息 是 可靠 的 ， 否则 至少 被 窃取 了 一定 能够 被 发现 。 因此 我们 可以 相信 ， 至少 理论 上 两军 问题 是 可解 的 ， 即 存在 一种 方法 ， 即使 利用 了 不 可靠 的 信道 ， 也 能 保证 信息 传递 的 可靠性 。 所以 ， 在 确保 了 信道 可靠 的 基础 上 ， 我们 可以 回到 拜占庭 将军 问题 上 继续 讨论 。   Part2 ： 问题 实质 及 形式化   我们 已经 了解 了 拜占庭 将军 问题 的 场景 ， 并且 明确 了 这个 问题 的 解决 是 建立 在 通信兵 可以 正确 的 传达 信息 的 基础 上 的 ， 即 信道 绝对 可信 。 同时 ， 通过 前 文 对于 两军 问题 的 探讨 ， 我们 明白 了 理论 上 可信 的 信道 也 是 可以 实现 的 。 接下来 ， 我们 将 探讨 拜占庭 将军 问题 的 实质 。   2.1 . 拜占庭 将军 问题 实质   回顾 问题 ， 一群 将军 想要 实现 某 一个 目标 （ 一致 进攻 或者 一致 撤退 ） ， 但是 单独 行动 行不通 ， 必须 合作 ， 
 达成 共识 ； 由于 叛徒 的 存在 ， 将军 们 不 知道 应该 如何 达到 一致 。 注意 ， 这里 “ 一致性 ” 才 是 拜占庭 将军 问题 探讨 的 内容 ， 如果 本来 叛徒 数量 就 已经 多到 了 问题 不可 解 的 地步 ， 这个 就是 “ 反叛 ” 的 问题 了 ； 同时 ， 我们 的 目标 是 忠诚 的 将军 能够 达成 一致 ， 对于 这些 忠诚 的 将军 来说 ， 进攻 或者 撤退 都 是 可以 的 ， 只要 他们 能够 达成 一致 就行 。 但是 ， 光靠 “ 一致 ” 就 可以 解决问题 吗 ？ 考虑一下 ， 如果 万事俱备 ， 客观 上 每个 忠诚 的 将军 只要 进攻 了 就 一定 能够 胜利 ， 但是 却 因为 叛徒 的 存在 他们 都 “ 一致 的 ” 没有 进攻 ； 反之 ， 条件 不利 ， 将军 们 不 应该 进攻 ， 但是 却 因为 叛徒 的 存在 所有人 都 “ 一致 的 ” 进攻 了 。 可以 发现 ， 只有 “ 一致性 ” 是 不足以 解决 拜占庭 将军 问题 的 ， 我们 还 需要 提出 一个 “ 正确性 ” 要求 。 这个 要求 是 值得 斟酌 的 ， 因为 如果 客观 来看 或许 会 有 “ 绝对 正确 的 ” 判断 ， 但是 针对 每 一个 将军 ， 大家 的 判断 或许 都 不 相同 ， 我们 如何 定义 “ 正确 ” 呢 ？ 我们 或许 可以 简单 地说 ， 正确 就是 每个 忠诚 的 将军 都 正确 的 表达 了 自己 的 意思 ， 不会 因为 叛徒 让 别的 将军 认为 忠诚 的 将军 是 叛徒 而 不 采用 他 传达 的 消息 。 至此 ， 我们 将 拜占庭 将军 问题 简化 成 了 ， 所有 忠诚 的 将军 都 能够 让 别的 将军 接收 到 自己 的 真实 意图 ， 并 最终 一致 行动 ； 而 形式化 的 要求 就是 ， “ 一致性 ” 与 “ 正确性 ” 。 如果 将 问题 推广 开来 ， 可以 发现 针对 一致性 和 正确性 的 算法 并 不 要求 命令 必须 是 “ 进攻 / 撤退 ” 或是 “ 1 / 0 ” ， 而 可以 是 “ 发送 消息 1 / 发送 消息 2 / 待机 ” 或 “ x / y / z / w ” ， 这 意味着 拜占庭 将军 问题 算法 可以 为 多种 分布式系统 提供 启发 ， 比如 电力系统 或 网络系统 。 由此可见 ， 这个 问题 说到底 是 一个 关于 一致性 和 正确性 的 算法 问题 ， 这个 算法 是 针对 的 是 忠诚 的 将军 ， 因为 叛徒 可以 做出 任何 超出 约定 的 判断 。 我们 就是 要 在 有 叛徒 的 干扰 下 ， 找到 一个 抗干扰 的 算法 。 要 解决 这个 算法 问题 ， 我们 需要 将 形式化 要求 具体化 。   2.2 . 形式化 条件 的 推演   定义 一个 变量 vi （ 为 不失 一般性 ， 并 不 要求 vi 是 布尔值 ） ， 作为 其他 将军 收到 的 第 i 个 将军 的 命令 值 ； i 将军 会 将 把 自己 的 判断 作为 vi 。 可以 想象 ， 由于 叛徒 的 存在 ， 各个 将军 收到 的 vi 值 不 一定 是 相同 的 。 之后 ， 定义 一个 函数 来 处理 向量 ( v1 , v2 , … , vn ) ， 代表 了 多数 人 的 意见 ， 各 将军 用 这个 函数 的 结果 作为 自己 最终 采用 的 命令 。 至此 ， 我们 可以 利用 这些 定义 来 形式化 这个 问题 ， 用以 匹配 一致性 和 正确性 。 1 ） 一致性 条件 1 ： 每 一个 忠诚 的 将军 必须 得到 相同 的 ( v1 , v2 , … , vn ) 指令 向量 或者 指令 集合 。 这 意味着 ， 忠诚 的 将军 并不一定 使用 i 将军 送来 的 信息 作为 vi ， i 将军 也 可能 是 叛徒 。 但是 仅靠 这个 条件 ， 忠诚 的 将军 的 信息 送来 的 信息 也 可能 被 修改 ， 这 将 影响 到 正确性 。 2 ） 正确性 条件 2 ： 若 i 将军 是 忠诚 的 ， 其他 忠诚 的 将军 必须 以 他 送 出 的 值 作为 vi 。 如此 ， 我们 得到 了 一致性 和 正确性 的 形式化 条件 （ 条件 1 和 条件 2 ） ， 这个 条件 是 充分条件 。 考虑 到 正确性 条件 是 针对 单个 将军 ， 而 一致性 条件 是 针对 所有 将军 的 ， 为 方便 我们 重写 一致性 条件 为 条件 1 ′ ： 无论 i 将军 是 忠诚 或是 叛徒 ， 任何 两个 忠诚 的 将军 都 使用 相同 的 vi 。 条件 1 和 条件 1 ′ 是 完全 等价 的 。 这 是 很 巧妙 的 一步 转换 ， 如此 一致性 条件 （ 条件 1 ′ ） 和 正确性 条件 （ 条件 2 ） 都 只 涉及 一个 将军 i 如何 帮 别的 将军 接受 自己 送出 的 值 vi ， 所以 可以 将 问题 改为 司令 - 副官 模式 来 简化 问题 ， 即 一个 司令 把 自己 的 命令 传递 给 n - 1 个 副官 ， 使得 ： IC1 ： 所有 忠诚 的 副官 遵守 一个 命令 ， 即 一致性 。 IC2 ： 若 司令 是 忠诚 的 ， 每 一个 忠诚 的 副官 遵守 他 发出 的 命令 ， 即 正确性 。 IC1 和 IC2 分别 由 条件 1 ′ 和 条件 2 演化 得来 。 司令 - 副官 模式 只要 将 司令 遍历 各个 将军 ， 就 可以 变成 完整 问题 ， 而 他们 采用 的 算法 可以 是 完全一致 的 。 IC1 和 IC2 构成 了 解决 拜占庭 将军 问题 的 充分条件 ， 在 这种 模式 下 ， 司令 副官 的 形式 下 达成 的 一致 意味着 司令 的 命令 得到 了 有效 传达 ， 若 出现 了 异议 ， 有 异议 的 将军 会 作为 司令 发起 新 的 司令 副官 模式 寻求 自己 的 观点 表达 ， 以 协商 达成 一致 。 接下来 ， 我们 可以 讨论 拜占庭 将军 问题 的 算法 了 ， 这个 算法 只要 能够 满足 IC1 和 IC2 ， 就 代表 这个 算法 可以 切实有效 的 解决 拜占庭 将军 问题 。 在 经典 的 情形 下 ， 我们 可以 找到 两种 办法 ， 口头 协议 和 书面 协议 。 笔者 将会 逐一 探讨 两种 算法 的 推演 和 证明 ， 其中 证明 部分 并 不会 采用 纯 推理 ， 而 以 介绍 证明 思路 为主 。 事实上 ， 若 完整 进行 了 算法 推演 ， 对 算法 已经 能够 有 一个 大致 的 了解 。 口头 协议 和 书面 协议 会 有 很多 不同 的 启发 ， 口头 协议 的 实现 起来 简单 ， 但是 算法 复杂 ， 同时 需要 克服 的 困难 更 多 ； 书面 协议 的 算法 本身 很 简单 ， 却 能够 克服 很多 问题 ， 但是 实现 算法 并 不 容易 。 这些 不同 让 两者 有 了 不同 的 使用 场景 和 具体 实现 。   Part3 ： 口头 协议   首先 ， 我们 明确 什么 是 口头 协议 。 我们 将 满足 以下 三个 条件 的 方式 称为 口头 协议 ： A1 ： 每个 被 发送 的 消息 都 能够 被 正确 的 投递 A2 ： 信息 接收者 知道 是 谁 发送 的 消息 A3 ： 能够 知道 缺少 的 消息 简而言之 ， 信道 绝对 可信 ， 且 消息来源 可知 。 但 要 注意 的 是 ， 口头 协议 并 不会 告知 消息 的 上 一个 来源 是 谁 。 先 告知 结论 ： 采用 口头 协议 ， 若 叛徒 数 少于 1 / 3 ， 则 拜占庭 将军 问题 可解 。 也就是说 ， 若 叛徒 数为 m ， 当 将军 总数 n 至少 为 3m + 1 时 ， 问题 可解 （ 即 满足 了 IC1 和 IC2 ） 。 这个 结论 说明 了 ， 一个 三模 冗余 的 系统 只能 容 故障冻结 类型 的 错误 ， 即 一个 元件 故障 以后 就 卡住 不动 了 （ 也 即 已知 错误 后 会 出现 的 结果 ） ， 那么 三模 冗余 是 足够 的 。 但是 对于 拜占庭 将军 问题 ， 由于 叛徒 可以 做出 各种各样 的 判断 ， 就 必须 四模 冗余 系统 才 足够 容错 。 口头 协议 算法 就是 把 自己 的 命令 告诉 其他人 ， 并 利用 对 其他人 的 命令 取 多数 的 方法 来 得到 自己 的 结论 。 但 要 注意 的 是 ， 别的 将军 传来 的 命令 是 通过 算法 递归 的 方法 来 确定 的 。 利用 这个 方法 ， 可以 保证 在 叛徒 数量 少于 1 / 3 的 情况 下 ， 忠诚 的 将军 可以 实现 一致性 和 正确性 要求 ， 即 问题 可解 。 那么 ， 口头 协议 算法 又 是 怎么 实现 叛徒 数 少于 1 / 3 即可 容错 的 呢 ？ 下面 ， 笔者 将 介绍 Lamport 在 其 论文 中 提出 的 口头 协议 OM ( m ) 算法 。 笔者 将会 逐一 介绍 口头 协议 算法 的 详细 内容 、 实例 推演 及 证明 ， 这 一部分 将会 需要 您 花 一些 时间 来 思考 。   3.1 . 口头 协议 算法 OM ( m )   OM ( 0 ) 算法 （ 1 ） 司令 将 他 的 命令 发送给 每个 副官 。 （ 2 ） 每个 副官 采用 从 司令 发来 的 命令 ； 如果 没有 收到 命令 ， 则 默认 为 撤退 命令 。 OM ( m ) 算法 （ 1 ） 司令 将 他 的 命令 发送给 每个 副官 。 （ 2 ） 对于 每个 i ， vi 是 每个 副官 i 从 司令 收到 的 命令 ， 如果 没有 收到 命令 ， 则 默认 为 撤退 命令 。 副官 i 在 OM ( m - 1 ) 中 作为 发令 者 将 之 发送给 另外 n - 2 个 副官 。 （ 3 ） 对于 每个 i ， 和 每个 j ≠ i ， vj 是 副官 i 从 第 2 步中 的 副官 j （ 使用 OM ( m - 1 ) 算法 ） 发送 过来 的 命令 ， 如果 没有 收到 第 2 步中 副官 j 的 命令 ， 则 默认 为 撤退 命令 。 最后 副官 i 使用 majority ( v1 , … , vn - 1 ) 得到 命令 。 其中 ， majority ( v1 , … , vn - 1 ) 代表 了 大多数 人 的 命令 ， 若 不 存在 则 默认 为 撤退 命令 。 要 一遍 读懂 这个 算法 并 不 容易 ， 笔者 也 是 花 了 不少 时间 研究 这 一小 段 文字 才 弄 明白 的 。 不过 您 不用 担心 ， 笔者 将会 解释 几个 值得注意 的 点 ， 并 利用 一个 不难 的 实例 来 帮助 您 理解 这个 算法 。 （ 1 ） 算法 始终 保证 了 一个 更加 安全 的 默认值 ， 这 意味着 若 信息 没有 传到 是 可知 的 ， 并且 传输 时间 不 在 考虑 范围 内 。 （ 2 ） 这个 算法 是 一个 递归 算法 ， 在 OM ( m ) 中 需要 采用 OM ( m - 1 ) 得到 相关 结果 。 m 代表 的 是 叛徒 数量 ， 从 m 到 0 ， 意味着 对于 每个 将军 ， 需要 m + 1 轮 的 算法 才能 完成 。 （ 3 ） 该 算法 是 关于 m 的 ， 意味着 使用 该 算法 必须 知道 有 多少 个 叛徒 。 或者说 ， 利用 该 算法 ， 可以 保证 叛徒 数量 在 某 一个 最大值 （ 即 总 将军 数量 的 1 / 3 ） 之下 时 ， 拜占庭 将军 问题 可解 。 （ 4 ） 对于 任意 k < m ， 在 第 m - k + 1 步中 OM ( k ) 的 vi ， 都 是 利用 OM ( k - 1 ) 得来 的 ， 即 每个 将军 将会 在 OM ( k - 1 ) 中 询问 其他人 ， i 将军 传给 他们 的 是 什么 ， 而 其他人 传递 回来 的 信息 则 是 利用 OM ( k - 2 ) 得到 。 这个 就是 递归 的 意义 ， 若 您 觉得 笔者 表达 得 不 甚 清楚 ， 不用 担心 ， 您 只用 记住 每 一步 都 会 牵涉到 下面 很多 步骤 就 可以 了 ， 之后 将 在 实例 推演 中 明白 算法 的 核心 思路 。   3.2 . 口头 协议 实例 推演   首先 ， 笔者 将 先举 一个 m = 1 ， n = 3 的 例子 来 说明 三模 冗余 的 问题所在 ， 并 介绍 m = 1 ， n = 4 的 时候 系统 是 怎么 容错 的 ， 这样 您 就 可以 明白 算法 是 运行 的 。 但 由于 m = 1 的 时候 并 没有 体现 递归 的 过程 （ 因为 m - 1 就 变成 了 0 ） ， 笔者 将 再举 一个 m = 2 ， n = 7 的 例子 来 说明 算法 递推 的 过程 。 
 （ 1 ） m = 1 ， n = 3 的 情形 n = 3 ， 意味着 一个 司令 发送 命令 给 两个 副官 ， m = 1 意味着 他们 中有 一个 叛徒 。 首先 考虑 司令 忠诚 而 副官 2 是 叛徒 的 情况 。 （ 图 4 ： m = 1 ， n = 3 中 司令 忠诚 而 副官 2 是 叛徒 的 情形 ） 司令 把 进攻 命令 传给 了 两个 副官 1 和 副官 2 ， 但是 由于 副官 2 为了 不让 他们 达成 一致 ， 将 司令 的 命令 改成 了 撤退 。 那 对于 副官 1 来说 ， 他 应该 如何 判断 ？ 他 无法 知道 是 司令 是 叛徒 还是 副官 2 是 叛徒 ， 从而 无法 判断 。                                             
                                                                         
                                                           （ 图 5 ： m = 1 ， n = 3 中 司令 是 是 叛徒 的 情形 ） 而 如果 司令 是 叛徒 ， 两个 副官 忠诚 ， 司令 会 发送 两个 不同 的 命令 。 当 两个 副官 对照 命令 时 ， 他们 又 凌乱 了 ， 无法 判断 司令 是 叛徒 或者 对方 是 叛徒 ， 从而 又 无法 判断 。 这个 情形 非常 简易 的 说明 了 三模 冗余 是 无法 动态 容错 的 。 （ 2 ） m = 1 ， n = 4 的 情形 
 n = 4 ， 意味着 一个 司令 发送 命令 给 三个 副官 ， m = 1 意味着 他们 中有 一个 叛徒 。 首先 考虑 司令 忠诚 而 副官 3 是 叛徒 的 情况 。 （ 图 6 ： m = 1 ， n = 4 中 司令 忠诚 而 副官 3 是 叛徒 的 情形 ） 倘若 司令 在 OM ( 1 ) 中 给 各 副官 发送 的 消息 都 是 进攻 （ A ） ， 之后 OM ( 0 ) 时 ， 叛徒 副官 3 给 副官 1 和 副官 2 说 他 收到 的 消息 是 撤退 （ R ） 。 那么 对于 副官 1 （ 或 副官 2 ） 来说 ， 他 综合 司令 、 副官 3 和 副官 2 （ 或 副官 1 ） 后 得到 的 消息 向量 都 将 会 是 ( A , A , R ) ， 利用 majority 函数 之后 ， 将会 采用 A ， 满足 了 IC1 和 IC2 （ 回顾 IC1 ： 所有 忠诚 的 副官 遵守 一个 命令 ， IC2 ： 若 司令 是 忠诚 的 ， 每 一个 忠诚 的 副官 遵守 他 发出 的 命令 ） 。   （ 图 7 ： m = 1 ， n = 4 中 司令 是 是 叛徒 的 情形 ） 倘若 司令 是 叛徒 ， 那么 我们 已经 不 需要 满足 IC2 。 为 方便 ， 我们 假设 叛徒 司令 在 OM ( 1 ) 会 给 三个 副官 发送 的 信息 是 ( x , y , z ) ， 其中 x ， y ， z 都 可以 是 A 或 R 的 任意 一种 。 之后 ， 三位 忠诚 的 副官 将会 按照 OM ( 0 ) 要求 的 那样 ， 交换 他们 收到 的 信息 。 对于 副官 1 ， 他 综合 司令 、 副官 2 和 副官 3 后 得到 的 消息 向量 将会 是 ( x , y , z ) ， 可以 发现 对于 其他 两个 忠实 的 副官 ， 他们 得到 的 消息 向量 也 将 是 ( x , y , z ) 。 不管 x ， y ， z 如何 变化 ， majority ( x , y , z ) 对于 三人 来说 都 是 一样 的 ， 所以 三个 副官 将会 采用 一致 的 行动 。 （ 3 ） m = 2 ， n = 7 的 情形 接下来 ， 我们 将 讨论 m = 2 ， n = 7 的 情形 ， 虽然 只是 多 了 一个 叛徒 ， 但是 这里 会 出现 递归 过程 ， 所以 会 复杂 很多 。 首先 ， 我们 先 讨论 司令 忠诚 的 情形 ， 假设 叛徒 为 副官 5 和 副官 6 。   （ 图 8 ： m = 2 ， n = 7 中 司令 忠诚 而 副官 5 和 副官 6 是 叛徒 的 情形 ） 在 OM ( 2 ) 中 ， 司令 将 攻击 命令 （ A ） 传给 各个 副官 。 在 OM ( 1 ) 中 ， 忠诚 的 副官 们 将 会 发送 他们 收到 的 消息 （ A ） ， 但 由于 副官 5 和 副官 6 是 叛徒 ， 他们 将会 发送 别的 信息 （ 比如 R ） 。 这时 ， 忠诚 的 副官 们 将 会 采用 使用 OM ( 1 ) 中 的 方法 来 确定 各个 v1 ~ v6 。 例如 ， 对于 副官 1 ， 他 收到 了 司令 传来 的 命令 ， 他会 直接 采用 majority 函数 综合 司令 和 其他 将军 传来 的 信息 吗 ？ 他 不会 ， 因为 这 还 在 OM ( 1 ) 中 ， 他 并不知道 司令 是不是 叛徒 ， 他会 利用 询问 别人 的 方式 来 确认 将军 的 命令 ， 但是 按照 算法 他会 把 司令 的 命令 作为 v1 （ 即 v1 = A ） 并 传给 其他人 。 接下来 他会 努力 取得 其他 的 v2 ~ v6 的 值 ， 这时 已经 在 OM ( 1 ) 中 了 ， 副官 1 绝不会 轻易 相信 别人 传来 的 消息 ， 比如 副官 2 给 他 传来 了 命令 A ， 但是 他会 怀疑 副官 2 传来 的 消息 ， 所以 他用 OM ( 1 ) 大法 ， 问 其他人 副官 2 传给 了 他们 什么 ， 副官 3 和 副官 4 诚实 的 告诉 副官 1 ， 副官 2 给 他们 传 的 是 A ， 而 这时 副官 5 和 副官 6 又 要 撒谎 了 ， 他们 又 乱说 ， 我们 姑且 假定 他们 传来 的 是 x ’ 和 y ’ 吧 。 这样 ， 终于 进入 到 了 OM ( 0 ) ， 这时 副官 1 将会 综合 其他 副官 对于 v2 的 反馈 ， 得到 向量 ( A , A , A , x ’ , y ’ ) ， 再 利用 majority 函数 ， 得到 了 v2 = A 。 如下 图 ， 这是 副官 1 在 OM ( 1 ) 中 得到 的 信息 （ x ， y 等 表示 了 不 确定 的 命令 ） 。                                                                       
                                                                         
                                         （ 图 9 ： 司令 忠诚 时 副官 1 在 OM ( 1 ) 中 得到 的 信息 ） 我们 就 可以 得到 副官 1 的 v1 ~ v6 向量 为 ( A , A , A , A , x , y ) ， 利用 majority 函数 ， 副官 1 最终 采用 的 行动 会 是 A 。 
 类似 的 ， 我们 可以 发现 ， 其他 几个 忠诚 的 副官 得到 的 命令 向量 都 会 是 ( A , A , A , A , x , y ) ， 利用 majority 函数 后 采用 的 行动 都 会 是 A 。 所以 ， 我们 可以 发现 忠诚 的 副官 采用 的 命令 都 是 A （ 满足 IC1 ） ， 并且 和 忠诚 的 将军 的 命令 一致 （ 满足 IC2 ） 。 至此 ， 您 应该 已经 明白 了 这个 算法 是 怎么 递归 的 ， 不管 m 等于 多少 ， 都 只是 一个 算法 步骤 多寡 的 问题 。 
 至于 司令 是 叛徒 的 情形 ， 其实 是 相似 的 ， 这里 简单 的 再 提 一下 便于 理解 。 若 您 已经 明白 了 算法 过程 ， 完全 可以 跳过 。                                                                       
                                                                         
                   （ 图 10 ： m = 2 ， n = 7 中 司令 和 副官 6 是 叛徒 的 情形 ） 为 方便 ， 我们 假定 了 副官 6 是 叛徒 。 司令 在 OM ( 2 ) 中 就 很 鸡 贼 的 给 副官 1 ~ 副官 6 发送 了 不同 的 命令 ( A , R , A , R , A , x ) 。 在 OM ( 1 ) 中 ， 各 副官 把 自己 收到 的 命令 传出去 ， 而 （ 为 方便 ， 假定 ） 副官 6 则 给 其他 副官 分别 发送 了 ( A , R , A , R , A ) 。 类似 于 前文 推演 的 那样 ， 考虑 副官 1 ， 他 将 司令 传来 的 命令 A 作为 v1 后 ， 还会 询问 其他人 传来 的 命令 ， 由此 去 确认 v2 ~ v6 ， 类似 的 ， 我们 将 之 表达 为 下图 ：                                                                       
                                                                         
                       （ 图 11 ： 司令 反叛 时 副官 1 在 OM ( 1 ) 中 得到 的 信息 ） 如图 ， 我们 就 可以 得到 副官 1 的 v1 ~ v6 向量 为 ( A , R , A , R , A , A ) ， 利用 majority 函数 ， 副官 1 最终 采用 的 行动 会 是 A 。 类似 的 ， 我们 可以 发现 忠诚 的 副官 1 ~ 副官 5 得到 的 消息 向量 都 是 ( A , R , A , R , A , A ) ， 最终 他们 采用 的 行动 都 会 是 A （ 满足 了 IC1 ） ， 而 司令 是 叛徒 不 需要 满足 IC2 。 值得 提醒 的 是 ， 若 副官 6 传递 的 是 ( R , A , R , A , R ) ， 那么 他们 所有人 得到 的 消息 向量 都 是 ( A , R , A , R , A , R ) ， 此时 A 和 R 数量 一样 多 ， 这 并 不 代表 majority 不起作用 了 ， 他 将 采用 默认值 R （ 回顾 前 文 ： majority ( v1 , … , vn - 1 ) 代表 了 大多数 人 的 命令 ， 若 不 存在 则 默认 为 撤退 命令 ） ， 所有人 的 行动 都 会 采用 R ， 这 同样 是 满足 的 。 到此为止 ， 我们 已经 将 口头 算法 的 实例 推演 进行 的 很 彻底 了 ， 若 您 还有 兴趣 ， 可以 试一试 当 n = 7 ， m = 3 的 时候 为什么 就 不能 达成 一致 了 ， 操作 是 类似 的 。 
 3.3 . 口头 协议 算法 证明 
 算法 的 证明 思路 其实 并 不 复杂 ， 简单 的 来说 ， 对于 一个 递归 算法 ， 我们 使用 数学 归纳法 来 证明 是 最 直观 而 又 有效 的 方法 了 。 我们 回顾 一下 命题 ： 将军 总数 为 n ， 叛徒 数量 为 m ， OM ( m ) 可以 实现 ， 在 n > 3m 的 情况 下 ， 使得 ： IC1 ： 所有 忠诚 的 副官 遵守 一个 命令 。 IC2 ： 若 司令 是 忠诚 的 ， 每 一个 忠诚 的 副官 遵守 他 发出 的 命令 。 为了 证明 整个 命题 ， 我们 先 引入 一个 针对 IC2 的 引理 ： 引理 ： 对于 任意 m 和 k ， 如果 有 超过 2k + m 个 将军 和 最 多 k 个 背叛者 ， 那么 算法 OM ( m ) 满足 IC2 。 证明 ： （ 1 ） m = 0 ， 而 将军 是 忠诚 的 ， 直接 满足 IC2 ； （ 2 ） m > 0 ， 此时 假定 OM ( m - 1 ) 是 有效 的 ， 那么 只 需要 考虑 OM ( m ) 这 一轮 即可 。 n > 2k + m ， 意味着 n - 1 > 2k ， n - 1 是 除了 司令 以外 的 所有 副官 ， 而 所有 副官 的 数量 比 叛徒 的 两倍 还 多 ， 那 他们 直接 利用 majority 函数 的 时候 ， 就 可以 直接 正确 得到 司令 的 命令 。 可以 发现 ， 这个 引理 说明 了 如果 只 需要 考虑 IC2 ， 将军 总数 是 不 需要 3 倍 背叛者 之多 的 ， 接下来 我们 回归 命题 。 证明 ： 首先 考虑 司令 是 忠诚 的 ， 令 引理 中 的 k = m ， 直接 得到 OM ( m ) 可以 满足 IC2 。 这时 ， 我们 只用 考虑 司令 是 叛徒 的 状况 。 同样 利用 数学 归纳法 。 （ 1 ） m = 1 ， 之前 我们 已经 推演 过 OM ( 1 ) 可以 满足 1 个 叛徒 司令 ， 3 个 忠诚 副官 的 情况 ； （ 2 ） m > 1 ， 那么 假设 n ’ > 3m ’ 的 情况 下 ， OM ( m - 1 ) 能够 满足 IC1 和 IC2 。 由于 司令 是 叛徒 ， 在 OM ( m ) 中 司令 会 把 命令 发给 各个 副官 ， 而 这些 副官 中会 有 m - 1 个 叛徒 。 在 下 一轮 中 ， 副官 的 数量 至少 有 3m 个 ， 叛徒 数为 m - 1 ， 很 显然 3m > 3 ( m - 1 ) ， 也就是说 n ’ > 3m ’ ， 根据 假设 ， OM ( m - 1 ) 可以 满足 IC1 和 IC2 ， 尽管 司令 是 叛徒 ， 由于 OM ( m - 1 ) 是 有效 的 ， OM ( m ) 这 一轮 中 忠诚 的 副官 可以 得到 相同 的 ( v1 , … , vn - 1 ) 向量 ， 所以 忠诚 的 副官 将会 利用 majority 函数 采用 相同 的 命令 ， 得证 。 总结 一下 ， 口头 协议 中 ， 我们 始终 要求 的 是 相同 的 ( v1 , … , vn - 1 ) 向量 ， 只要 这个 向量 是 相同 的 我们 怎么 处理 都 可以 。 又 由于 算法 是 递归 的 ， 所以 我们 一定 需要 把 这个 处理 方法 变得 通用 而 逻辑 有效 才行 ， 所以 我们 才 选用 了 majority 函数 这个 算法 。 这 一点 至关重要 却 又 没有 这么 直观 ， 因为 我们 的 第一 反应 是 要 得到 相同 的 majority 函数 值 。 但是 反过来 一想 ， 既然 算法 是 递归 的 ， majority 函数 值 相同 不 就 意味着 ( v1 , … , vn - 1 ) 向量 相同 吗 ？ 正确理解 递归 的 思想 是 使用 该 算法 和 利用 数学 归纳法 证明 该 算法 的 关键点 。 至此 ， 我们 已经 大致 明确 了 口头 协议 是 怎么回事 ， 可以 做到 什么 不能 做到 什么 ， 以及 这个 算法 的 推演 和 证明 。 很多 系统 都 会 出现 口头 协议 的 情况 ， 即 各个系统 节点 可以 把 自己 的 消息 准确 的 发送 出去 ， 同时 可以 知道 消息 的 来源于 何处 。 但是 ， 这个 方法 的 消息 并 不能 追本溯源 ， 这 使得 在 口头 协议 中 至少 得四模 冗余 ， 我们 可以 试图 找到 一个 方法 ， 让 消息 能够 追本溯源 ， 可以 想象 这 能够 拓宽 使用 条件 ， 这个 方法 可以 是 书面 协议 。   Part4 ： 书面 协议   口头 协议 中 我们 讨论 了 很多 ， 揭示 了 口头 协议 的 缺点 是 消息 不能 追本溯源 ， 这 使得 口头 协议 必须 在 四模 冗余 的 情况 下 才能 保证 正确 。 但是 ， 若能 引入 一种 方法 让 消息 能够 追本溯源 ， 情况 会 不会 有所 改变 呢 ？ 这 就是 书面 协议 引入 的 灵感 。 除了 A1 ， A2 和 A3 以外 ， 我们 在 口头 协议 之上 添加 一个 条件 A4 ， 使 之 成为 书面 协议 A4 ： （ a ） 签名 不可 伪造 ， 一旦 被 篡改 即可 发现 ， 而 叛徒 的 签名 可 被 其他 叛徒 伪造 ； （ b ） 任何人 都 可以 验证 签名 的 可靠性 。 那么 ， 我们 先说 结论 ： 对于 任意 m ， 最 多 只有 m 个 背叛者 情况 下 ， 算法 SM ( m ) 能 解决 拜占庭 将军 问题 。 也就是说 ， 在 使用 签名 的 情况 下 ， 书面 协议 可以 打破 三模 冗余 的 僵局 ， 使用 了 签名 的 情况 下 ， 只要 知道 了 叛徒 数量 ， 我们 就 可以 利用 SM ( m ) 算法 解决 拜占庭 将军 问题 。   4.1 . 书面 协议 算法 SM ( m )   口头 协议 算法 我们 已经 讨论 过 很多 了 ， 所以 笔者 对 书面 协议 尽量 简短 的 介绍 。 回顾 IC1 ： 所有 忠诚 的 副官 遵守 一个 命令 ， 即 一致性 。 IC2 ： 若 司令 是 忠诚 的 ， 每 一个 忠诚 的 副官 遵守 他 发出 的 命令 ， 即 正确性 。 我们 要 找到 一个 算法 SM ( m ) ， 不管 将军 总数 n 和 叛徒 数量 m ， 只要 采用 该 算法 ， 忠诚 的 将军 总能 达到 一致 （ 满足 IC1 和 IC2 ） 。 我们 用 集合 Vi 来 表示 i 副官 收到 的 命令集 ， 这是 一个 集合 ， 也 就是 满足 互 异性 （ 没有 重复 的 元素 ） 等 集合 的 条件 。 类似 的 ， 我们 定义 choice ( V ) 函数 来 决定 各个 副官 的 选择 ， 这个 函数 可以 有 非常 多种形式 ， 他 只要 满足 了 以下 两个 条件 ： （ 1 ） 如果 集合 V 只 包含 了 一个 元素 v ， 那么 choice ( V ) = v （ 2 ） choice ( o ) = RETREAT ， 其中 o 是 空集 任何 满足 了 这 两个 条件 的 函数 都 可以 作为 choice ( ) ， 例如 取 平均值 就 可以 。 我们 只 需要 根据 具体 情形 定义 choice ( ) 即可 ， 这个 非 重点 ， 笔者 并 不 加以 讨论 ， 您 可以 自行 思考 。 之后 我们 会 发现 SM ( m ) 算法 并 不是 一个 递归 算法 ， 我们 只要 让 各个 副官 收到 的 V 集 相同 ， choice ( V ) 也 一定 能够 得到 相同 的 值 。 简单 解释 该 算法 如下 ： 初始化 Vi = 空集合 。 （ 1 ） 将军 签署 命令 并 发给 每个 副官 ； （ 2 ） 对于 每个 副官 i ： （ A ） 如果 副官 i 从 发令 者 收到 v : 0 的 消息 ， 且 还 没有 收到 其他 命令 序列 ， 那么 他 （ i ） 使 Vi 为 { v } ； （ ii ） 发送 v : 0 : i 给 其他 所有 副官 。 （ B ） 如果 副官 i 收到 了 形如 v : 0 : j1 : … : jk 的 消息 且 v 不 在 集合 Vi 中 ， 那么 他 （ i ） 添加 v 到 Vi ； （ ii ） 如果 k < m ， 那么 发送 v : 0 : j1 : … : jk : i 给 每个 不 在 j1 , .. , jk 中 的 副官 。 （ 3 ） 对于 每个 副官 i ， 当 他 不再 收到 任何 消息 ， 则 遵守 命令 choive ( Vi ) 。 值得注意 的 是 ， 如果 司令 忠诚 ， 由于 其 签名 不可 伪造 ， 所有 忠诚 的 副官 都 将 得到 一个 单点 集 { v } ， 他们 采用 的 命令集 Vi 相同 ， 得到 的 choive ( Vi ) 也 为 v ， 满足 了 IC1 和 IC2 。 如果 司令 并非 忠诚 ， 只 需要 满足 IC1 ， 但是 算法 SM ( m ) 使得 所有 忠诚 的 副官 得到 相同 的 Vi ， 使用 choice ( ) 函数 后 采用 的 命令 也 就 一定 相同 。   4.2 . 书面 协议 实例 推演   司令 是 叛徒 的 状况 稍难 想象 ， 举个 例子 ， n = 3 ， m = 1 ， 其中 司令 是 叛徒 ， 这是 口头 协议 不能 解决 的 状况 。                                                                       
                                                                         
                                 （ 图 12 ： m = 1 ， n = 3 中 司令 是 叛徒 的 情形 ） 很 显然 ， 副官 1 得到 的 V1 = { A , R } ， 副官 2 得到 相同 的 V2 = { A , R } 。 他们 采用 choice 函数 后 得到 的 命令 一定 相同 。 相似 的 ， n = 4 ， m = 2 ， 其中 司令 是 叛徒 ， 这 同样 是 口头 协议 不能 解决 的 状况 。   （ 图 13 ： m = 2 ， n = 4 中 司令 和 副官 3 是 叛徒 的 情形 ） 副官 1 和 副官 2 得到 的 V1 = V2 = { A , R } ， 他们 采用 choice 函数 后 得到 的 命令 也 相同 。 即使 命令 不是 布尔值 ， 经过 上面 的 分析 框架 ， 也 可以 得到 相似 的 结论 。 至于 这个 算法 的 证明 ， 有 兴趣 的 读者 可以 参考 Lamport 的 原文 ， 笔者 就 不 做 过 多 解释 了 ， 如 有 问题 仍 可 与 笔者 联系 。                                                                       
                                                                         
                               （ 图 14 ： Lamport 在 论文 中 对 书面 协议 算法 的 证明 ） 书面 协议 的 本质 就是 引入 了 签名 系统 ， 这 使得 所有 消息 都 可 追本溯源 。 这一 优势 ， 大大 节省 了 成本 ， 他 化解 了 口头 协议 中 1 / 3 要求 ， 只要 采用 了 书面 协议 ， 忠诚 的 将军 就 可以 达到 一致 （ 实现 IC1 和 IC2 ） 。 这个 效果 是 惊人 的 ， 相 较 之下 口头 协议 则 明显 有 一些 缺陷 。 书面 协议 的 结论 非常 令人兴奋 ， 这 不是 解决 了 拜占庭 将军 问题 了 吗 ？ 但 请 注意 我们 在 A1 ~ A4 中 实际上 是 添加 了 一些 条件 的 ， 这 使得 拜占庭 将军 问题 在 这些 假设 下 能够 解决 ， 但是 在 实际 状况 中 却 会 有 一些 问题 。 观察 A1 ~ A4 ， 我们 做 了 一些 在 现实 中 比较 难以完成 的 假设 ， 比如 没 考虑 传输 信息 的 延迟时间 ， 书面 协议 的 签名 体系 难以实现 ， 而且 签名 消息 记录 的 保存 难以 摆脱 一个 中心化 机构 而 独立 存在 。 事实上 ， 存在 能够 完美 解决 书面 协议 实际 局限 的 方法 ， 这个 方法 就是 区块 链 。 区块 链 源自 比特 币 ， 不过 在 这 之前 ， 已有 多项 跨 领域 技术 ， 皆 是 构成 区块 链 的 关键技术 ； 而 现在 的 区块 链 技术 与 应用 ， 也 已经 远超过 比特 币 区块 链 。 要 追溯 区块 链 （ Blockchain ） 是 怎么 来 的 ， 不外乎 先 想到 比特 币 （ Bitcoin ） ， 比特 币 是 第一个 采用 区块 链 技术 打造出 的 P2P 电子货币 系统 应用 ， 不过 比特 币 区块 链 并非 一项 全新 的 技术 ， 而是 将 跨 领域 过去 数十年 所 累积 的 技术 基础 结合 。 比特 币 区块 链所 实现 的 基于 零 信任 基础 、 且 真正 去 中心化 的 分散式 系统 ， 其实 解决 一个 30 多年 前 由 LeslieLamport 等 人 所 提出 的 拜占庭 将军 问题 。 1982 年 Leslie 
 Lamport 把 军中 各地 军队 彼此 取得 共识 、 决定 是否 出兵 的 过程 ， 延伸 至 运算 领域 ， 设法 建立 具 容错性 的 分散式 系统 ， 即使 部分 节点 失效 仍 可 确保 系统 正常 运行 ， 可 让 多个 基于 零 信任 基础 的 节点 达成 共识 ， 并 确保 资讯 传递 的 一致性 ， 而 2008 年 出现 的 比特 币 区块 链 便 解决 了 此 问题 。 而 比特 币 区块 链中 最 关键 的 工作量 证明 机制 ， 则 是 采用 由 Adam 
 Back 在 1997 年 所 发明 Hashcash （ 杂凑 现金 ） ， 为 一种 工作量 证明 演算法 （ ProofofWork ， POW ） ， 此 演算法 仰赖 成本 函数 的 不 可逆 特性 ， 达到 容易 被 验证 ， 但 很 难 被 破解 的 特性 ， 最早 被 应用 于 阻挡 垃圾邮件 。 在 隐私 安全 方面 的 技术 ， 可 回溯到 1982 年 David 
 Chaum 提出 注重 隐私 的 密码学 网路 支付 系统 ， 具有 不可 追踪 的 特性 ， 成为 比特 币 区块 链 在 隐私 安全 面上 的 雏形 ， 之后 David 
 Chaum 也 基于 这个 理论 打造出 不可 追踪 的 密码学 网路 支付 系统 eCash ， 不过 eCash 并非 去 中心化 系统 。 在 区块 链中 每笔 交易 ， 采用 椭圆 曲线 数位 签章 演算法 （ EllipticCurveDigitalSignatureAlgorithm ， ECDSA ） ， 可追溯 回 1985 年 Neal 
 Koblitz 和 VictorMiller 分别 提出 椭圆 曲线 密码学 （ Ellipticcurve 
 cryptography ， ECC ） ， 首次 将 椭圆 曲线 用于 密码学 ， 建立 公开 金钥 加密 的 演算法 。 相较 于 RSA 演算法 ， 采用 ECC 好处 在于 可以 较 短 的 金钥 ， 达到 相同 的 安全 强度 。 到 了 1992 年 ， 由 Scott 
 Vanstone 等 人 提出 ECDSA 。 区块 链 最早 源于 比特 币 ， 但 区块 链 的 应用 却 不仅 于 此 。 过去 几年 也 陆续 出现 许多 基于 区块 链 技术 的 电子货币 （ 统称 为 Altcoins ) ， 不过 随着 比特 币 持续 备受 争议 ， 各国 政府 与 金融机构 纷纷 表态 ， 直到 近 1 、 2 年 ， 大家 才 终于 意识 到 区块 链 的 真实 价值 ， 远超过 于 电子货币 系统 。 区块 链 可 结合 认许 制 ， 以 满足 金融监管 需求 若要 将 比特 币 与 区块 链 技术 分开 来看 ， 最大 的 不同之处 在于 ， 由于 比特 币 为 虚拟 货币 应用 ， 因此 面临 各国 法规 的 限制 ， 但 区块 链 现在 已经 可 结合 认许 制 或 其他 方式 来 管控 节点 ， 决定 让 哪些 节点 参与 交易 验证 及 存取 所有 的 资料 ， 并 提供 治理 架构 （ GovernanceStructure ） 及 商业 逻辑 （ BusinessLogic ） 两大 关键 特性 。 目前 区块 链 可 分为 非 实名制 和 实名制 两种 ， 前者 如 比特 币 区块 链 ， 后者 如 台大 地 的 GCoin 区块 链 。 现在 的 区块 链 已经 可 结合 认许 制 ( Permissioned ) ， 来 配合 金融监管 所 需 的 反洗钱 ( AML ) 与 身份验证 ( KYC ) 规范 。 而 银行 和 金融机构 想 采用 的 都 是 实名制 的 区块 链 。 区块 链 演进 阶段 区块 链 技术 随着 比特 币 出现 后 ， 经历 了 几个 不同 的 阶段 ， 常见 的 分法 将 比特 币 视为 Blockchain1.0 ， 为 数位 货币 （ Currency ） 应用 ， Blockchain2.0 开始 出现 如 智慧 资产 （ SmartAssets ） 、 智慧 契约 （ SmartContracts ） 等 货币 以外 的 应用 ， Blockchain3.0 则 是 指 更 复杂 的 智慧 契约 ， 将 区块 链 用于 政府 、 医疗 、 科学 、 文化 与 艺术 等 领域 。 区块 链 新创 DTCO 执行长 李亚鑫 基于 现有 的 分法 进行 补充 ， 他 认为 ， Blockchain2.0 以 彩色 币 （ Colored 
 Coin ） 为 代表 ， 在 区块 链上 运行 OpenAssetsProtocal ， 可 传递 货币 以外 的 数位 资产 ， 如 股票 、 债券 等 。 而 从 Blockchain 
 2.0 之后 ， 可 再 分出 一类 属于 Blockchain2.5 的 应用 ， 包括 代币 （ 货币 桥 ） 应用 、 分散式 帐本 （ DistributedLedgers ） 、 资料 层 区块 链 （ DataLayersBlockchain ） 、 结合 人工智慧 （ ArtificialIntelligent ） ， 以及 无 交易所 的 国际 汇款 网路 ， 以 Ripple 为 代表 ， 资料 层 、 分散式 储存 则 以 Factom 、 MaidSafe 为 代表 ， Blockchain3.0 则 以 Ethereum 为 代表 。 他 表示 ， Blockchain2.5 跟 Blockchain3.0 最大 的 不同 在于 ， 3.0 较 强调 是 更 复杂 的 智慧 契约 ， 以 2.5 则 强调 代币 （ 货币 桥 ） 应用 ， 如可 用于 金融 领域 联盟 制 区块 链 ， 如 运行 1 : 1 的 美元 、 日圆 、 欧元 等 法币 数位化 。 由于 区块 链 协议 几乎 都 是 开源 的 ， 因此 要 取得 区块 链 协议 的 原始 码 不是 问题 ， 重点 是 要 找到 好 的 区块 链 服务供应商 ， 协助 导入 现有 的 系统 。 而 银行 或 金融机构 得 对 区块 链有 一定 的 了解 ， 才能 知道 该 如何 选择 ， 并 应用 于 适合 的 业务 情境 。 去年 金融 科技 （ Fintech ） 才刚 吹进 亚洲 ， 没想到 才 过 几个 月 ， 一股 更 强劲 的 区块 链 技术 也 开始 引爆 ， 全球 金融 产业 可说是 展现 了 前所未有 的 决心 ， 也 让 区块 链 迅速 成为 各界 切入 金融 科技 的 关键 领域 。 尽管 现在 就 像是 区块 链 的 战国时代 ， 不过 银行 或 金融机构 要 从 理解 并 接受 区块 链 ， 到 找出 一套 大家 都 认可 的 区块 链 ， 且 真正 应用 于 交易 上 ， 恐怕 还 需要 一段时间 。 这次 只 比 国外 晚 了 半年 ， 引爆 点 可 从 台大 释出 一套 自行 开发 的 开源 区块 链 协议 GCoin ， 并 宣布 将 成立 金融 科技 暨 区块 链 中心 说起 ， 短短 一周 的 时间 ， 便 引发 各界 高度 关注 ， 接着 研讨会 不断 ， 不过 ， 由于 区块 链 具有 较 高 的 技术 门槛 ， 大家 都 知道 它 拥有 许多 特性 跟 好处 ， 但 却 迟迟 处于 观望 阶段 ， 就 连 区块 链 的 新 创业者 ， 也 非常 稀少 。 银行业 目前 也 还 卡 在 门口 ， 除了 少数 金控 开始 分享 这个 议题 之外 ， 多数 金融业 者 仍 处于 试图 理解 技术 面 的 阶段 。 技术 演进 ： 区块 链是 怎么 来 的 1982 年 拜占庭 将军 问题 LeslieLamport 等 人 提出 拜占庭 将军 问题 （ ByzantineGenerals 
 Problem ） ， 把 军中 各地 军队 彼此 取得 共识 、 决定 是否 出兵 的 过程 ， 延伸 至 运算 领域 ， 设法 建立 具 容错性 的 分散式 系统 ， 即使 部分 节点 失效 仍 可 确保 系统 正常 运行 ， 可 让 多个 基于 零 信任 基础 的 节点 达成 共识 ， 并 确保 资讯 传递 的 一致性 ， 而 2008 年 出现 的 比特 币 区块 链 便 解决 了 此 问题 。 DavidChaum 提出 密码学 网路 支付 系统 DavidChaum 提出 注重 隐私 安全 的 密码学 网路 支付 系统 ， 具有 不可 追踪 的 特性 ， 成为 之后 比特 币 区块 链 在 隐私 安全 面 的 雏形 。 1985 年 椭圆 曲线 密码学 NealKoblitz 和 VictorMiller 分别 提出 椭圆 曲线 密码学 （ EllipticCurve 
 Cryptography ， ECC ） ， 首次 将 椭圆 曲线 用于 密码学 ， 建立 公开 金钥 加密 的 演算法 。 相较 于 RSA 演算法 ， 采用 ECC 好处 在于 可用 较 短 的 金钥 ， 达到 相同 的 安全 强度 。 1990 年 DavidChaum 基于 先前 理论 打造出 不可 追踪 的 密码学 网路 支付 系统 ， 就是 后来 的 eCash ， 不过 eCash 并非 去 中心化 系统 。 LeslieLamport 提出 具高 容错 的 一致性 演算法 Paxos 。 1991 年 使用 时间 戳 确保 数位 文件 安全 StuartHaber 与 W . ScottStornetta 提出 用 时间 戳 确保 数位 文件 安全 的 协议 ， 此 概念 之后 被 比特 币 区块 链 系统 所 采用 。 1992 年 ScottVanstone 等 人 提出 椭圆 曲线 数位 签章 演算法 （ EllipticCurveDigitalSignatureAlgorithm ， ECDSA ） 1997 年 AdamBack 发明 Hashcash 技术 AdamBack 发明 Hashcash （ 杂凑 现金 ） ， 为 一种 工作量 证明 演算法 （ Proofof 
 Work ， POW ） ， 此 演算法 仰赖 成本 函数 的 不 可逆 特性 ， 达到 容易 被 验证 ， 但 很 难 被 破解 的 特性 ， 
 最早 被 应用 于 阻挡 垃圾邮件 。 Hashcash 之后 成为 比特 币 区块 链所 采用 的 关键技术 之一 。 （ Adam 
 Back 于 2002 年 正式 发表 Hashcash 论文 ） 1998 年 WeiDai 发表 匿名 的 分散式 电子 现金 系统 B - moneyWeiDai 发表 匿名 的 分散式 电子 现金 系统 B - money ， 引入 工作量 证明 机制 ， 强调 点对点 交易 和 不可 窜改 特性 。 不过 在 B - money 中 ， 并未 采用 AdamBack 提出 的 Hashcash 演算法 。 WeiDai 的 许多 设计 之后 被 比特 币 区块 链所 采用 。 NickSzabo 发表 BitGoldNickSzabo 发表 去 中心化 的 数位 货币 系统 BitGold ， 参与者 可 贡献 运算 能力 来 解出 加密 谜题 。 2005 年 可 重复使用 的 工作量 证明 机制 （ RPOW ） HalFinney 提出 可 重复使用 的 工作量 证明 机制 （ ReusableProofsofWork ， RPOW ） ， 结合 B - money 与 AdamBack 提出 的 Hashcash 演算法 来 创造 密码学 货币 。 2008 年 Blockchain1.0 ： 加密 货币 数位 货币 与 支付 系统 去 中心化 、 比特 币 ： SatoshiNakamoto （ 中本聪 ） 发表 一篇 关于 比特 币 的 论文 ， 描述 一个 点对点 电子 现金 系统 ， 能 在 不具 信任 的 基础 之上 ， 建立 一套 去 中心化 的 电子 交易 体系 。 2012 年 Blockchain2.0 ： 智慧 资产 、 智慧 契约 市场 去 中心化 ， 可 作 货币 以外 的 数位 资产 转移 ， 如 股票 、 债券 。 如 ColoredCoin 便是 基于 比特 币 区块 链 的 开源 协议 ， 可 在 比特 币 在 区块 链上 发行 多项 资产 2014 年 Blockchain3.0 ： 更 复杂 的 智慧 契约 更 复杂 的 智慧 合约 ， 将 区块 链 用于 政府 、 医疗 、 科学 、 文化 与 艺术 等 领域 。 2016 年 Blockchain2.5 ： 金融 领域 应用 、 资料 层 Blockchain2.5 ： 强调 代币 （ 货币 桥 ） 应用 、 分散式 帐本 、 资料 层 区块 链 ， 及 结合 人工智慧 等 金融 应用 Blockchain3.0 ： 更 复杂 的 智慧 契约 拜占庭 将军 问题 ” （ ByzantineGenerals 
 Problem ） 是 一个 建立 于 共识 机制 解决 的 实例 。 拜占庭 为 过去 东 罗马帝国 的 首都 ， 现在 位于 土耳其 的 伊斯坦堡 。 由于 当时 拜占庭 罗马帝国 的 国土 辽阔 ， 基于 防御 目的 ， 每个 军队 都 分隔 遥远 ， 因此 将军 间 只能靠 信差 传递 消息 。 于 战争 时 ， 拜占庭 帝国 军队 的 将军 们 必须 全体一致 的 决定 是否 攻击 某 一支 敌军 ， 因为 唯有 达成 一致 的 行动 才能 获致 胜利 。 将军 中若 存在 叛徒 ， 叛徒 可以 采取行动 以 欺骗 某些 将军 进行 进攻 行动 ， 或 致使 他们 无法 做出 决定 ， 缺乏 一致 行动 的 结果 则 将 注定 战事 的 失利 。 类比 于 区块 链上 的 共识 机制 ， 拜占庭 消息 误传 系指 区块 链上 分散式 网络 中 节点 所 出现 的 任何 错误 （ 如 ， 伪造 签名 、 恶意 破坏 系统 的 一致性 、 超时 、 重复 发送 消息 等 ） 。 共识 机制 通常 具有 容错 的 设计 ， 即使 某些 节点 失败 或是 缓慢 的 ， 分散式 网络 中 节点 的 独立 处理器 仍能 达成 某种 精确 的 相互 一致性 。 但是 共识 机制 具 多样 种类 且 其 各自 特性 ， 并 由 小表 显示 的 共识 机制 基本参数 来 决定 。 共识 机制 基本参数 定义 分散式 治理 一个 中央 节点 不能 提供 交易 最终 确定 仲裁 结构 在 预先 定义 的 方式 进行 节点 间 讯息 交换 身份验证 验证 参加 身份 完整性 交易 完整性 的 验证 不可否认 性 验证 发送者 应该 是 交易 讯息 的 真正 发送者 隐私 确保 只有 预期 的 收件 者 才能 阅读 交易 讯息 高效 容错 网络 能 高效 快速 的 运行 ， 即使 某些 节点 失败 或 缓慢 性能 吞吐量 ， 活跃度 ， 可扩展性 和 延迟 实用 拜占庭 容错 算法 （ Practical 
 ByzantineFaultTolerance - 
 PBFT ） 的 共识 运作 为 讯息 在 分散式 网络 中 节点 间 互相交换 后 ， 由 各 节点 列出 所有 得到 的 信息 ， 以 大多数 的 结果 作为 解决办法 。 而 在 PBFT 算法 中 ， 主要 依据 法定 多数 （ quorum ） 的 决定 ， 一个 节点 代表 一票 ， 以 少数 服从 多数 的 方式 实现 了 拜占庭 的 容错 演算 。 至多 容错 量 以 不 超过 全部 节点 数 的 1 / 3 ， 意即 如果 有 超过 2 / 3 的 正常 节点 ， 整个 系统 就 便 可 正常 运作 ( R 
 ≥ 3F + 1 ; R ： 节点 总数 ， F ： 有 问题 节点 总数 ) 。 PBFT 算法 的 运作 步骤 为 ： ( 1 ) 取 一个 副本 作为 主 节点 ， 其他 的 副本 作为 备份 ； ( 2 ) 用户端 向主 节点 发送 使用 服务 操作 的 请求 ； ( 3 ) 主 节点 通过 广播 将 请求 发送给 其他 副本 ； ( 4 ) 所有 副本 执行 请求 并 将 结果 发回 用户端 ； ( 5 ) 用户端 需要 等待 F + 1 个 不同 副本 节点 发回 相同 的 结果 ， 作为 整个 操作 的 最终 结果 。 因此 ， PBFT 算法 对 所有 非 有 问题 之 副本 节点 的 请求 执行 总 顺序 可 达成 一致 ， 据 以 保证 安全性 。 所有 用户端 最终 都 会 收到 针对 他们 请求 的 回复 ， 据 以 确保 活跃度 ( liveness ) 。 实用 拜占庭 容错 算法 保证 安全性 与 活跃度 示意图 与 传统 的 数据库 在 私有 和 中心化 服务器上进行 存储 和 维护 不同 ， 区块 链是 一种 去 中心化 的 ， 公开 分配 的 并且 是 透明 的 。 身份 保护 是 当今 数字化 世界 中 的 一个 常见问题 。 看似 每隔 一个 星期 ， 头条 都 会 透露 一些 黑客 已经 突破 了 一个 中心化 服务器 ， 导致 数以百万计 的 财务 记录 ， 医疗 记录 或 身份 被盗 。 这个 问题 在 开始 好转 之前 可能 会 变得 更糟 。 截至 2016 年 ， 有 130 亿个 设备 与 互联网 相连 。 这些 设备 中 持有 我们 的 个人信息 ， 银行 记录 和 信用卡 号码 。 到 了 2020 年 ， 这个 数字 将 达到 400 亿 ， 这 将 使 我们 比 以往 任何 时候 都 更 暴露 。   从 数字 来看 身份 盗窃   每年 有 大约 1500 万 的 美国 居民 的 身份 被 冒用 。 政府 维护 的 记录 和 企业 数据库 丢失 或 被盗 ， 每年 额外 还有 近 1 亿 美国 人 的 个人身份 信息 处于 身份 盗窃 的 风险 中 。 2014 年 数据 泄露 总计 达到 1540 起 ， 导致 超过 十亿 个 数据 记录 被 损害 。 45% 的 信用卡 诈骗 是 网上交易 ， 通过 网络 无需 展示 卡片 。 身份 盗窃 对 美国 经济 造成 的 损失 总体 上 估计 达到 每年 1000 亿美元 。 全球 损失 轻易 就 达到 千亿美元 。 去年 ， 近 1 亿 的 医疗 记录 被 攻破 。 医疗 记录 可以 在 暗 网上 以 每条 60 美元 的 价格 进行 购买 。 社会保障 号码 只要 用 15 美元 就 可以 买 到 。 区块 链 的 进入 点   数据库 成为 黑客 的 主要 目标 ， 因为 它们 上面 存有 中心化 信息 。 如果 加密 被 破解 ， 黑客 也许 能够 窃取 所有 正在 被 存储 的 信息 。 区块 链 技术 通过 将 所有 这些 数据 去 中心化 ， 能够 为 这个 问题 提供 一种 独特 的 解决方案 。 因此 ， 数据 将 不会 存在 于 一个 单一 的 服务器 上 ， 取而代之 的 是 一个 在 世界各地 的 成千上万 的 计算机 维护 的 分布式 公共 账本 。 由此 ， 各种 数据 攻击 将 几乎 不 可能 实现 ， 因为 没有 一个 实体 在 掌控 这些 信息 。   个人用户 如何 保护 他们 的 数据 不 受 恶意 行为 的 伤害 ？   “ 拜占庭 将军 问题 ” 从 一部 电影 中 挑出 一个 场景 ： 一个 中世纪 的 城堡 正 遭受 攻击 。 城堡 内 200 名 士兵 正在 保卫 自己 的 国王 。 城堡 之外 有 4 支 军队 ， 各有 100 名 士兵 正在 等待 来自 中尉 的 命令 。 如果 他们 不能 同时 发起 进攻 ， 那么 他们 将会 输掉 这场 战争 。 领导 这些 军队 的 中尉 如何 能够 就 同时 向 城堡 发起 进攻 达成 一致 ？ 这 存在 两个 变量 。 一个 是 由 将军 创建 的 ‘ 下午 7 点 进攻 ’ 消息 命令 ， 需要 通过 骑马 用手 传递 给 每 一个 中尉 。 第二个 ， 中尉 中 可能 存在 叛徒 ， 可能 会 试图 改变 消息 ， 从而 输掉 战争 。 因此 ， 将军 弄 了 一个 特殊 的 带锁 的 盒子 ， 并且 有 两套 钥匙 ， 私有 的 和 公开 的 。 四个 中尉 都 有 一个 公钥 ， 只能 顺时针 旋转 ， 看看 盒子 里 是 什么 。 将军 拥有 私钥 ， 可以 逆时针 方向 旋转 ， 改变 盒内 的 信息 。 那个 将军 拿 着 这个 带锁 的 盒子 ， 逆时针 转动 私钥 ， 并 放入 必要 的 信息 — — 7pm 攻击 城堡 。 盒子 然后 送往 第一个 中尉 ， 他 拿出 自己 的 公钥 顺时针 旋转 ， 看到 将军 发出 的 7pm 攻击 命令 。 然后 这个 盒子 被 传送 到 第二个 中尉 那里 。 他 决定 使用 他 的 公钥 逆时针 转动 ， 希望 改变 和 破坏 里面 的 攻击 命令 信息 。 然而 ， 因为 将军 的 这个 非常 先进 的 锁 ， 公钥 不会 允许 这个 中尉 这样 做 。 信息 无法 被 改变 ， 因此 在 不 被 破坏 的 情况 下 传递 到 第三个 和 第四个 中尉 那里 。 攻击 最终 按照 原 计划 成功 发起 。 现在 ， 让 我们 将 这 与 区块 链 联系 起来 。 你 可以 将 任何 有 价值 的 东西 存储 在 一个 ‘ 数字 锁盒 ’ 中 。 盒子 中 的 内容 只能 通过 一个 独特 的 私钥 来 打开 和 改变 。 盒 中 的 内容 然后 可以 根据 需要 进行 共享 ， 并且 不会 被 改变 或者 复制 。 这 就是 比特 币 所 实现 的 私有 / 公共 密钥 加密 的 简化 架构 。 身份验证 的 未来 是 什么 样子 的 ？   有 多个 创业 公司 正在 致力于 创建 区块 链 身份 解决方案 。 Shocard ， 由 Armin 
 Ebrahimi 于 2015 年 创建 的 公司 ， 正在 寻找 创建 一种 移动 ID ， 能够 使用 加密 和 比特 币 公有 账本 的 不可 更改 性来 进行 实时 验证 。 Ebrahimi 将 Shocard 视为 一种 方式 ， 人们 可以 用来 安全 和 即时 地 核实 自己 的 保险 事故 ， 电子商务 供应商 ， 银行 或者 任何 第三方 机构 等 ， 这些 他们 必须 提供 身份 信息 的 机构 。   界面   用户 可以 上传 身份证件 到 Shocard 应用 。 这些 文件 将 被 立即 存储 和 加密 到 区块 链 。 Shocard 自己 不必 存储 或 持有 任何 这些 文件 。 文件 被 密封 在 区块 链上 ， 因此 不能 被 改变 。 Shocard 可以 由 任何 需要 知道 你 的 身份 的 人来 认证 。 例如 ， 如果 一家 银行 需要 验证 你 的 身份 ， 你 可 把 你 的 经过 加密 的 Shocard 发送 过去 。 然后 ， 银行 核实 Shocard 数据 与 区块 链上 的 密封 数据 匹配 。 然后 ， 银行 创建 他们 自己 与 你 的 Shocard 相 联系 的 记录 ， 并 使用 他们 的 私钥 加密 。 这样 ， 银行 在 任何 需要 的 时候 就 会 知道 是 你 。 这种 验证 可以 用于 账户 登录 ， 账户 管理 ， 信用卡 认证 等等 。 它 类似 于 一个 银行 保存 在 文件 中 的 签名 卡 ， 用于 匹配 个人 支票 上 的 签名 。 银行 和 旅游 行业 的 使用 案例   例 1 ： 在 登录 时 ， 代替 输入 容易 被 黑 和 忘记 的 用户名 和 密码 ， 你 只 需要 简单 扫描 一下 来自 你 的 Shocardapp 的 银行 网页 上 的 二维码 即可 。 然后 ， 会 向 你 的 app 推送 一个 通知 ， 要求 提供 指纹 验证 。 提供 指纹 之后 ， 你 就 会 自动 登录 。 例 2 ： 如果 你 因为 账户 问题 需要 呼叫 银行 客服 。 传统 而言 ， 他们 可能 会 问 你 一些 安全 问题 。 这些 问题 可能 是 ， 你 母亲 的 娘家 姓 ？ 你 的 账户 号 ？ 你 的 用户名 ？ 如果 你 的 账户 被 黑 ， 这些 都 可能 会 被 破坏 。 相反 ， 使用 Shocard ， 一个 通知 将 被 发送到 您 的 应用程序 ， 同时 与 银行 运营商 通话 ： 通知 将 要求 一个 指纹 来 验证 你 是 谁 。 指纹 被 Shocard 
 app 验证 之后 ， 银行 就 会 确定 电话 的 另一端 就是 你 本人 。 例 3 ： 乘客 使用 Shocard 
 APP 上传 他们 的 所有 旅行 文件 。 这些 文件 然后 会 在 区块 链上 进行 密封 和 加密 ， 任何人 都 可以 使用 公共 密钥 来 验证 它们 的 真实性 。 乘客 在 办理 登机 手续 ， 机场 安检 和 移民 检查站 时 通过 扫描 二维码 来 分享 这些 信息 。 也许 第一次 的 时候 乘客 需要 提供 原始 文件 来 验证 ， 不过 ， 经常 坐飞机 的 人 将 能够 根据 需要 使用 这个 app 。 总结   有 一点 是 肯定 的 ， 身份 盗窃 保护 服务业 将 在 未来 十年 内 出现 激进 的 变化 。 共享 秘密 （ 用户名 / 密码 ） 已经 变成 了 一场 噩梦 。 中心化 密钥 服务器 非常 危险 ， 墨水 签名 很 容易 伪造 ， 文件 和 身份证 是 第十九 世纪 的 技术 ， 双 因素 授权 服务 往往 是 不 方便 和 不 可靠 的 。 在 此 之上 ， 到 2020 年 ， 我们 会 看到 与 互联网 连接 的 设备 数量 增加 3 倍 ， 使 我们 比 以往 任何 时候 都 更 暴露 给 黑客 。 我 并 不是 宣传 区块 链 技术 能够 解决 一切 问题 ， 但 这种 技术 看起来 是 朝着 正确方向 的 一步 。 像 Shocard , 
 Solidx , 和 Civic 这样 的 公司 处于 这种 创新 的 前沿 ， 而 这种 创新 可能 会为 整个 行业 带来 颠覆性 变化 。 更 多 免费 行业 调研 报告 ， 金融 理论 深度 学习 ， 电子书 ， 请 关注 公众 号 并 加入 金融 核心 微信群 ／ 商业 合作 （ 注明 加群 ＋ 工作 单位 ＋ 工作 地区 ） 否则 不 加 ， 感谢 合作 请加 Dorian 君微信 ： 收听 更 多 直播 ／ 金融 ／ 英语 核心 课程 ， 成为 投行 精英 ， 扫码 关注 （ 订阅 更加 深度 ， 全面 的 大课 ， 请 扫 以上 二维码 ） 微博 ： Dorian 君雪 球网 id : 大空神 知乎 ： Dorian 君微博 ： Dorian 君 连续 创业者 自营 交易员 加入 華爾街 見識 圈子 ， 一年 每天 深度 學習 分組 討論 環球 金融 ， 請 掃二維碼 （ 现 优惠 限时 99 元 ／ 年 ， 明年 恢 復 原價 199 元 ／ 月 ） ： 关注 极客 文化 ／ 大 数据 ／ 人工智能 ／ 国际金融 ， 关注 灰岩 金融 科技 公眾號 ... 國內 官網 ： www . ravenrock - capital . com 國外 官網 ： www . ravenrockcapital . netravenrock . weebly . com 关注 我们 和 这个 时代 一起 前 行长 按 识别 二维码 关注 我们 浏览 每日 短篇 国际 英语 新闻 研报 ， 点击 下方   原文 链接   进入 灰岩 官网 ， 收听 更 多 课程 。